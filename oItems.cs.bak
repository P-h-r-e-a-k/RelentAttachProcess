using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Windows.Forms;

namespace LBATrainer
{
    class Items
    {
        public Item[] Inventory;
        public Item[] Twinsen;
        public Item MagicLevel;
        public Item MagicPoints;
        public Item Kashers;
        public Item Keys;
        public Item Clovers;
        public Item CloverBoxes;
        public Item Gas;
        public Item Health;
        public Item MecaPenguins;
        public Item Darts;
        public Item Gems;
        public Item Zilitos;
        private XmlDocument doc;

        public Items(uint LBAVer)
        {
            string path;
            if(1 == LBAVer)
                path = new Uri(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase)).LocalPath + "\\files\\lba1MemoryLocations.xml";
            else
                path = new Uri(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase)).LocalPath + "\\files\\lba2MemoryLocations.xml";
            doc = new XmlDocument();
            doc.Load(path);
            XmlNodeList nodes = doc.DocumentElement.SelectNodes("/items/inventory/item");

            loadInventory(doc.DocumentElement.SelectNodes("/items/inventory/item"));
            loadTwinsen(LBAVer, doc.DocumentElement.SelectNodes("/items/Twinsen/item"));
            
            nodes = doc.DocumentElement.SelectNodes("/items/Twinsen/item");
            Twinsen = new Item[nodes.Count];
            for(int i = 0; i < Twinsen.Count();i++)
            {
                Item x = new Item();
                x.name = nodes[i].SelectSingleNode("name").InnerText.Trim();
                x.memoryOffset = int.Parse(nodes[i].SelectSingleNode("memoryOffset").InnerText.Trim(), System.Globalization.NumberStyles.HexNumber);
                x.maxVal = ushort.Parse(nodes[i].SelectSingleNode("maxVal").InnerText.Trim());
                x.minVal = ushort.Parse(nodes[i].SelectSingleNode("minVal").InnerText.Trim());
                x.size = ushort.Parse(nodes[i].SelectSingleNode("size").InnerText.Trim());
                x.type = ushort.Parse(nodes[i].SelectSingleNode("type").InnerText.Trim());
                x.lbaVersion = ushort.Parse(nodes[i].SelectSingleNode("lbaVersion").InnerText.Trim());
                Twinsen[i] = x;
            }
        }

        private void loadInventory(XmlNodeList nodes)
        {
            Inventory = new Item[nodes.Count];
            for (int i = 0; i < Inventory.Count(); i++)
            {
                Item x = new Item();
                
                x.name = nodes[i].SelectSingleNode("name").InnerText.Trim();
                string s = nodes[i].SelectSingleNode("memoryOffset").InnerText.Trim();
                x.memoryOffset = int.Parse(s, System.Globalization.NumberStyles.HexNumber);
                x.maxVal = ushort.Parse(nodes[i].SelectSingleNode("maxVal").InnerText.Trim());
                x.minVal = ushort.Parse(nodes[i].SelectSingleNode("minVal").InnerText.Trim());
                x.size = ushort.Parse(nodes[i].SelectSingleNode("size").InnerText.Trim());
                x.type = ushort.Parse(nodes[i].SelectSingleNode("type").InnerText.Trim());
                x.lbaVersion = ushort.Parse(nodes[i].SelectSingleNode("lbaVersion").InnerText.Trim());
                Inventory[i] = x;
            }
        }

        private void loadTwinsen(uint LBAVer, XmlNodeList nodes)
        {
            if (1 == LBAVer)
                loadLBA1Twinsen(nodes);
            else
                loadLBA2Twinsen(nodes);
        }

        private void loadLBA1Twinsen(XmlNodeList nodes)
        {
            MagicLevel = getTwinsenItem(nodes, 0);
            MagicPoints = getTwinsenItem(nodes, 1);
            Kashers = getTwinsenItem(nodes, 2);
            Keys = getTwinsenItem(nodes, 3);
            Clovers = getTwinsenItem(nodes, 4);
            CloverBoxes = getTwinsenItem(nodes, 5);
            Gas = getTwinsenItem(nodes, 6);
            Health = getTwinsenItem(nodes, 7);
        }

        private void loadLBA2Twinsen(XmlNodeList nodes)
        {
            MagicLevel = getTwinsenItem(nodes, 0);
            MagicPoints = getTwinsenItem(nodes, 1);
            Kashers = getTwinsenItem(nodes, 2);
            Keys = getTwinsenItem(nodes, 3);
            Clovers = getTwinsenItem(nodes, 4);
            CloverBoxes = getTwinsenItem(nodes, 5);
            Health = getTwinsenItem(nodes, 6);
            MecaPenguins = getTwinsenItem(nodes, 7);
            Darts = getTwinsenItem(nodes, 8);
            Gems = getTwinsenItem(nodes, 9);
            Zilitos = getTwinsenItem(nodes, 10);
        }
        private Item getTwinsenItem(XmlNodeList nodes, int i)
        {
            Item x = new Item();
            x.name = nodes[i].SelectSingleNode("name").InnerText.Trim();
            x.memoryOffset = int.Parse(nodes[i].SelectSingleNode("memoryOffset").InnerText.Trim(), System.Globalization.NumberStyles.HexNumber);
            x.maxVal = ushort.Parse(nodes[i].SelectSingleNode("maxVal").InnerText.Trim());
            x.minVal = ushort.Parse(nodes[i].SelectSingleNode("minVal").InnerText.Trim());
            x.size = ushort.Parse(nodes[i].SelectSingleNode("size").InnerText.Trim());
            x.type = ushort.Parse(nodes[i].SelectSingleNode("type").InnerText.Trim());
            x.lbaVersion = ushort.Parse(nodes[i].SelectSingleNode("lbaVersion").InnerText.Trim());
            return x;
        }
    }
}
